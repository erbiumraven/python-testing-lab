{"uid":"df730eb4211105f2","name":"test_get_pet_by_invalid_id_string","fullName":"tests.api.test_get_pet_by_id.TestGetPetById#test_get_pet_by_invalid_id_string","historyId":"febc64712e31d7f52060ab09abe64b32","time":{"start":1759063283970,"stop":1759063283975,"duration":5},"description":"Get pet by invalid ID format returns 400.","descriptionHtml":"<p>Get pet by invalid ID format returns 400.</p>\n","status":"failed","statusMessage":"AssertionError: Response body does not contain 'invalid petid format': {\"code\":400,\"message\":\"Input error: couldn't convert `dobby_45_a` to type `class java.lang.Long`\"}","statusTrace":"self = <test_get_pet_by_id.TestGetPetById object at 0x7fa945ad46d0>\nsession = <requests.sessions.Session object at 0x7fa9459109d0>\npet_url = 'https://petstore3.swagger.io/api/v3/pet'\n\n    @allure.description(\"Get pet by invalid ID format returns 400.\")\n    def test_get_pet_by_invalid_id_string(self, session, pet_url):\n        response = get_with_allure(session, f'{pet_url}/dobby_45_a')\n>       assert_invalid_pet_id_format(response)\n\ntests/api/test_get_pet_by_id.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [400]>\n\n    def assert_invalid_pet_id_format(response):\n        with allure.step(\"Verify that error occurred where pet id format is invalid (400)\"):\n            assert response.status_code == 400, \\\n                f\"Expected 400, got {response.status_code}\"\n    \n>           assert \"invalid petid format\" in response.text.lower(), \\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n                f\"Response body does not contain 'invalid petid format': {response.text}\"\nE           AssertionError: Response body does not contain 'invalid petid format': {\"code\":400,\"message\":\"Input error: couldn't convert `dobby_45_a` to type `class java.lang.Long`\"}\n\nhelpers/assertion_helper.py:177: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"session","time":{"start":1759063283641,"stop":1759063283642,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1759063283641,"stop":1759063283641,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1759063283641,"stop":1759063283641,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"allure_environment","time":{"start":1759063283641,"stop":1759063283641,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1759063283641,"stop":1759063283641,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop_policy","time":{"start":1759063283641,"stop":1759063283641,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"pytestconfig","time":{"start":1759063283641,"stop":1759063283641,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"pet_url","time":{"start":1759063283642,"stop":1759063283642,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Get pet by invalid ID format returns 400.","status":"failed","statusMessage":"AssertionError: Response body does not contain 'invalid petid format': {\"code\":400,\"message\":\"Input error: couldn't convert `dobby_45_a` to type `class java.lang.Long`\"}","statusTrace":"self = <test_get_pet_by_id.TestGetPetById object at 0x7fa945ad46d0>\nsession = <requests.sessions.Session object at 0x7fa9459109d0>\npet_url = 'https://petstore3.swagger.io/api/v3/pet'\n\n    @allure.description(\"Get pet by invalid ID format returns 400.\")\n    def test_get_pet_by_invalid_id_string(self, session, pet_url):\n        response = get_with_allure(session, f'{pet_url}/dobby_45_a')\n>       assert_invalid_pet_id_format(response)\n\ntests/api/test_get_pet_by_id.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [400]>\n\n    def assert_invalid_pet_id_format(response):\n        with allure.step(\"Verify that error occurred where pet id format is invalid (400)\"):\n            assert response.status_code == 400, \\\n                f\"Expected 400, got {response.status_code}\"\n    \n>           assert \"invalid petid format\" in response.text.lower(), \\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n                f\"Response body does not contain 'invalid petid format': {response.text}\"\nE           AssertionError: Response body does not contain 'invalid petid format': {\"code\":400,\"message\":\"Input error: couldn't convert `dobby_45_a` to type `class java.lang.Long`\"}\n\nhelpers/assertion_helper.py:177: AssertionError","steps":[{"name":"GET /api/v3/pet/dobby_45_a","time":{"start":1759063283970,"stop":1759063283975,"duration":5},"status":"passed","steps":[],"attachments":[{"uid":"3624fc6aab75da0","name":"Request","source":"3624fc6aab75da0.json","type":"application/json","size":211},{"uid":"502cbd0372318a0a","name":"Response","source":"502cbd0372318a0a.json","type":"application/json","size":592}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},{"name":"Verify that error occurred where pet id format is invalid (400)","time":{"start":1759063283975,"stop":1759063283975,"duration":0},"status":"failed","statusMessage":"AssertionError: Response body does not contain 'invalid petid format': {\"code\":400,\"message\":\"Input error: couldn't convert `dobby_45_a` to type `class java.lang.Long`\"}\n","statusTrace":"  File \"/home/runner/work/python-testing-lab/python-testing-lab/helpers/assertion_helper.py\", line 177, in assert_invalid_pet_id_format\n    assert \"invalid petid format\" in response.text.lower(), \\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"story","value":"Get Pet by ID"},{"name":"feature","value":"Pet API"},{"name":"tag","value":"pet_get"},{"name":"parentSuite","value":"tests.api"},{"name":"suite","value":"test_get_pet_by_id"},{"name":"subSuite","value":"TestGetPetById"},{"name":"host","value":"runnervm3ublj"},{"name":"thread","value":"2103-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.api.test_get_pet_by_id"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":["pet_get"]},"source":"df730eb4211105f2.json","parameterValues":[]}