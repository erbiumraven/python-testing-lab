{"uid":"ccb1696944121a89","name":"test_find_pets_multiple_status","fullName":"tests.api.test_pet_status.TestFindPetByStatus#test_find_pets_multiple_status","historyId":"4779a460b39667c551130be2940acb2e","time":{"start":1759063606198,"stop":1759063606222,"duration":24},"description":"Find pets by multiple valid statuses returns pets for each status.","descriptionHtml":"<p>Find pets by multiple valid statuses returns pets for each status.</p>\n","status":"failed","statusMessage":"AssertionError: Expected 200, got 400","statusTrace":"self = <test_pet_status.TestFindPetByStatus object at 0x7f71028d8190>\nsession = <requests.sessions.Session object at 0x7f710270e890>\npet_status_url = 'https://petstore3.swagger.io/api/v3/pet/findByStatus'\nall_statuses_pets = [{'category': {'id': 1, 'name': 'Dogs'}, 'id': 872391, 'name': 'Hardy', 'photoUrls': ['https://pixabay.com/photos/pome...196681, 'name': 'Hardy', 'photoUrls': ['https://pixabay.com/photos/pomeranian-dog-puppy-mammal-animal-8096885/'], ...}]\n\n    @allure.description(\"Find pets by multiple valid statuses returns pets for each status.\")\n    def test_find_pets_multiple_status(self, session, pet_status_url, all_statuses_pets):\n        statuses = {pet[\"status\"] for pet in all_statuses_pets}\n        param = \",\".join(statuses)\n        url = f\"{pet_status_url}?status={param}\"\n        response = get_with_allure(session, url)\n>       assert_pets_status_success(response, statuses, all_statuses_pets)\n\ntests/api/test_pet_status.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [400]>, status_set = {'available', 'pending', 'sold'}\ntest_pet_list = [{'category': {'id': 1, 'name': 'Dogs'}, 'id': 872391, 'name': 'Hardy', 'photoUrls': ['https://pixabay.com/photos/pome...196681, 'name': 'Hardy', 'photoUrls': ['https://pixabay.com/photos/pomeranian-dog-puppy-mammal-animal-8096885/'], ...}]\n\n    def assert_pets_status_success(response, status_set, test_pet_list):\n        with (allure.step(f'Verify that pets with status in {status_set} (200)')):\n>           assert response.status_code == 200, f\"Expected 200, got {response.status_code}\"\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE           AssertionError: Expected 200, got 400\n\nhelpers/assertion_helper.py:82: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"event_loop_policy","time":{"start":1759063605088,"stop":1759063605088,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1759063605088,"stop":1759063605088,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"pytestconfig","time":{"start":1759063605088,"stop":1759063605088,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1759063605088,"stop":1759063605088,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1759063605088,"stop":1759063605088,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"pet_url","time":{"start":1759063605089,"stop":1759063605089,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"allure_environment","time":{"start":1759063605089,"stop":1759063605089,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"session","time":{"start":1759063605089,"stop":1759063605089,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"pet_status_url","time":{"start":1759063605865,"stop":1759063605865,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"all_statuses_pets","time":{"start":1759063606126,"stop":1759063606197,"duration":71},"status":"passed","steps":[{"name":"POST /api/v3/pet","time":{"start":1759063606126,"stop":1759063606150,"duration":24},"status":"passed","steps":[],"attachments":[{"uid":"8a3dddb4f81c2a3","name":"Request","source":"8a3dddb4f81c2a3.json","type":"application/json","size":538},{"uid":"ec9a5521b3f35c55","name":"Response","source":"ec9a5521b3f35c55.json","type":"application/json","size":795}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},{"name":"POST /api/v3/pet","time":{"start":1759063606150,"stop":1759063606173,"duration":23},"status":"passed","steps":[],"attachments":[{"uid":"429b411064cc2332","name":"Request","source":"429b411064cc2332.json","type":"application/json","size":536},{"uid":"8cfae7b36e7ce4ab","name":"Response","source":"8cfae7b36e7ce4ab.json","type":"application/json","size":793}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},{"name":"POST /api/v3/pet","time":{"start":1759063606173,"stop":1759063606197,"duration":24},"status":"passed","steps":[],"attachments":[{"uid":"1d8651103ea306f3","name":"Request","source":"1d8651103ea306f3.json","type":"application/json","size":533},{"uid":"5fcde458dc76ee0a","name":"Response","source":"5fcde458dc76ee0a.json","type":"application/json","size":790}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":2,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":6,"hasContent":true,"attachmentStep":false}],"testStage":{"description":"Find pets by multiple valid statuses returns pets for each status.","status":"failed","statusMessage":"AssertionError: Expected 200, got 400","statusTrace":"self = <test_pet_status.TestFindPetByStatus object at 0x7f71028d8190>\nsession = <requests.sessions.Session object at 0x7f710270e890>\npet_status_url = 'https://petstore3.swagger.io/api/v3/pet/findByStatus'\nall_statuses_pets = [{'category': {'id': 1, 'name': 'Dogs'}, 'id': 872391, 'name': 'Hardy', 'photoUrls': ['https://pixabay.com/photos/pome...196681, 'name': 'Hardy', 'photoUrls': ['https://pixabay.com/photos/pomeranian-dog-puppy-mammal-animal-8096885/'], ...}]\n\n    @allure.description(\"Find pets by multiple valid statuses returns pets for each status.\")\n    def test_find_pets_multiple_status(self, session, pet_status_url, all_statuses_pets):\n        statuses = {pet[\"status\"] for pet in all_statuses_pets}\n        param = \",\".join(statuses)\n        url = f\"{pet_status_url}?status={param}\"\n        response = get_with_allure(session, url)\n>       assert_pets_status_success(response, statuses, all_statuses_pets)\n\ntests/api/test_pet_status.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [400]>, status_set = {'available', 'pending', 'sold'}\ntest_pet_list = [{'category': {'id': 1, 'name': 'Dogs'}, 'id': 872391, 'name': 'Hardy', 'photoUrls': ['https://pixabay.com/photos/pome...196681, 'name': 'Hardy', 'photoUrls': ['https://pixabay.com/photos/pomeranian-dog-puppy-mammal-animal-8096885/'], ...}]\n\n    def assert_pets_status_success(response, status_set, test_pet_list):\n        with (allure.step(f'Verify that pets with status in {status_set} (200)')):\n>           assert response.status_code == 200, f\"Expected 200, got {response.status_code}\"\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE           AssertionError: Expected 200, got 400\n\nhelpers/assertion_helper.py:82: AssertionError","steps":[{"name":"GET /api/v3/pet/findByStatus","time":{"start":1759063606198,"stop":1759063606221,"duration":23},"status":"passed","steps":[],"attachments":[{"uid":"9bc8368af5786f01","name":"Request","source":"9bc8368af5786f01.json","type":"application/json","size":211},{"uid":"2165133632da35a","name":"Response","source":"2165133632da35a.json","type":"application/json","size":647}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},{"name":"Verify that pets with status in {'sold', 'pending', 'available'} (200)","time":{"start":1759063606221,"stop":1759063606221,"duration":0},"status":"failed","statusMessage":"AssertionError: Expected 200, got 400\n","statusTrace":"  File \"/home/runner/work/python-testing-lab/python-testing-lab/helpers/assertion_helper.py\", line 82, in assert_pets_status_success\n    assert response.status_code == 200, f\"Expected 200, got {response.status_code}\"\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"all_statuses_pets::0","time":{"start":1759063609359,"stop":1759063609428,"duration":69},"status":"passed","steps":[{"name":"DELETE /api/v3/pet/872391","time":{"start":1759063609359,"stop":1759063609381,"duration":22},"status":"passed","steps":[],"attachments":[{"uid":"e8a74dca49031a8b","name":"Request","source":"e8a74dca49031a8b.json","type":"application/json","size":211},{"uid":"bb231d8f93518f4d","name":"Response","source":"bb231d8f93518f4d.json","type":"application/json","size":492}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},{"name":"DELETE /api/v3/pet/533703","time":{"start":1759063609381,"stop":1759063609405,"duration":24},"status":"passed","steps":[],"attachments":[{"uid":"8c342bb387739223","name":"Request","source":"8c342bb387739223.json","type":"application/json","size":211},{"uid":"6393832de251b763","name":"Response","source":"6393832de251b763.json","type":"application/json","size":492}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},{"name":"DELETE /api/v3/pet/196681","time":{"start":1759063609405,"stop":1759063609428,"duration":23},"status":"passed","steps":[],"attachments":[{"uid":"8de8b14bf185145a","name":"Request","source":"8de8b14bf185145a.json","type":"application/json","size":211},{"uid":"5e4726b1d83efb5f","name":"Response","source":"5e4726b1d83efb5f.json","type":"application/json","size":492}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":2,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":6,"hasContent":true,"attachmentStep":false}],"labels":[{"name":"story","value":"Get Pet by Status"},{"name":"feature","value":"Pet API"},{"name":"tag","value":"pet_status"},{"name":"parentSuite","value":"tests.api"},{"name":"suite","value":"test_pet_status"},{"name":"subSuite","value":"TestFindPetByStatus"},{"name":"host","value":"runnervm3ublj"},{"name":"thread","value":"2109-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.api.test_pet_status"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":["pet_status"]},"source":"ccb1696944121a89.json","parameterValues":[]}