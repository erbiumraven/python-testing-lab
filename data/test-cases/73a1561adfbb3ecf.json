{"uid":"73a1561adfbb3ecf","name":"test_find_pets_by_status[sold]","fullName":"tests.api.test_pet_status.TestFindPetByStatus#test_find_pets_by_status","historyId":"0c20f3368ead9599045b76fa6c9ff28a","time":{"start":1759063284050,"stop":1759063284056,"duration":6},"description":"Find pets by a single valid status returns matching pets.","descriptionHtml":"<p>Find pets by a single valid status returns matching pets.</p>\n","status":"failed","statusMessage":"AssertionError: Pet with id=337473 not found in response. Note: this is a limitation of the test server; on production this cannot happen.","statusTrace":"self = <test_pet_status.TestFindPetByStatus object at 0x7fa945ac9950>\nsession = <requests.sessions.Session object at 0x7fa9459109d0>\npet_status_url = 'https://petstore3.swagger.io/api/v3/pet/findByStatus'\npet_with_status = {'category': {'id': 1, 'name': 'Dogs'}, 'id': 337473, 'name': 'Hardy', 'photoUrls': ['https://pixabay.com/photos/pomeranian-dog-puppy-mammal-animal-8096885/'], ...}\n\n    @allure.description(\"Find pets by a single valid status returns matching pets.\")\n    def test_find_pets_by_status(self, session, pet_status_url, pet_with_status):\n        status = pet_with_status[\"status\"]\n        url = f\"{pet_status_url}?status={status}\"\n        response = get_with_allure(session, url)\n>       assert_pets_status_success(response, {status}, [pet_with_status])\n\ntests/api/test_pet_status.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [200]>, status_set = {'sold'}\ntest_pet_list = [{'category': {'id': 1, 'name': 'Dogs'}, 'id': 337473, 'name': 'Hardy', 'photoUrls': ['https://pixabay.com/photos/pomeranian-dog-puppy-mammal-animal-8096885/'], ...}]\n\n    def assert_pets_status_success(response, status_set, test_pet_list):\n        with (allure.step(f'Verify that pets with status in {status_set} (200)')):\n            assert response.status_code == 200, f\"Expected 200, got {response.status_code}\"\n    \n            json_data = response.json()\n    \n            assert len(json_data) >= len(test_pet_list), \\\n                f\"Expected at least {len(test_pet_list)} pet(s) in response, but got len(json_data) pet(s)\"\n    \n            pets = [Pet(**p) for p in json_data]\n    \n            for pet in pets:\n                assert pet.status in status_set, f\"Expected status in {status_set}, got {pet.status}\"\n    \n            for test_pet_status in test_pet_list:\n                actual_pet = next((pet for pet in pets if pet.id == test_pet_status['id']), None)\n>               assert actual_pet is not None, (\n                       ^^^^^^^^^^^^^^^^^^^^^^\n                    f\"Pet with id={test_pet_status['id']} not found in response. \"\n                    \"Note: this is a limitation of the test server; on production this cannot happen.\"\n                )\nE               AssertionError: Pet with id=337473 not found in response. Note: this is a limitation of the test server; on production this cannot happen.\n\nhelpers/assertion_helper.py:96: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"session","time":{"start":1759063283641,"stop":1759063283642,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1759063283641,"stop":1759063283641,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1759063283641,"stop":1759063283641,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"allure_environment","time":{"start":1759063283641,"stop":1759063283641,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1759063283641,"stop":1759063283641,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop_policy","time":{"start":1759063283641,"stop":1759063283641,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"pytestconfig","time":{"start":1759063283641,"stop":1759063283641,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"pet_url","time":{"start":1759063283642,"stop":1759063283642,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"pet_status_url","time":{"start":1759063283989,"stop":1759063283989,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"pet_with_status","time":{"start":1759063284044,"stop":1759063284049,"duration":5},"status":"passed","steps":[{"name":"POST /api/v3/pet","time":{"start":1759063284044,"stop":1759063284049,"duration":5},"status":"passed","steps":[],"attachments":[{"uid":"543008a9ef1400b8","name":"Request","source":"543008a9ef1400b8.json","type":"application/json","size":533},{"uid":"2e74ea1002ec0892","name":"Response","source":"2e74ea1002ec0892.json","type":"application/json","size":790}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":2,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":2,"hasContent":true,"attachmentStep":false}],"testStage":{"description":"Find pets by a single valid status returns matching pets.","status":"failed","statusMessage":"AssertionError: Pet with id=337473 not found in response. Note: this is a limitation of the test server; on production this cannot happen.","statusTrace":"self = <test_pet_status.TestFindPetByStatus object at 0x7fa945ac9950>\nsession = <requests.sessions.Session object at 0x7fa9459109d0>\npet_status_url = 'https://petstore3.swagger.io/api/v3/pet/findByStatus'\npet_with_status = {'category': {'id': 1, 'name': 'Dogs'}, 'id': 337473, 'name': 'Hardy', 'photoUrls': ['https://pixabay.com/photos/pomeranian-dog-puppy-mammal-animal-8096885/'], ...}\n\n    @allure.description(\"Find pets by a single valid status returns matching pets.\")\n    def test_find_pets_by_status(self, session, pet_status_url, pet_with_status):\n        status = pet_with_status[\"status\"]\n        url = f\"{pet_status_url}?status={status}\"\n        response = get_with_allure(session, url)\n>       assert_pets_status_success(response, {status}, [pet_with_status])\n\ntests/api/test_pet_status.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [200]>, status_set = {'sold'}\ntest_pet_list = [{'category': {'id': 1, 'name': 'Dogs'}, 'id': 337473, 'name': 'Hardy', 'photoUrls': ['https://pixabay.com/photos/pomeranian-dog-puppy-mammal-animal-8096885/'], ...}]\n\n    def assert_pets_status_success(response, status_set, test_pet_list):\n        with (allure.step(f'Verify that pets with status in {status_set} (200)')):\n            assert response.status_code == 200, f\"Expected 200, got {response.status_code}\"\n    \n            json_data = response.json()\n    \n            assert len(json_data) >= len(test_pet_list), \\\n                f\"Expected at least {len(test_pet_list)} pet(s) in response, but got len(json_data) pet(s)\"\n    \n            pets = [Pet(**p) for p in json_data]\n    \n            for pet in pets:\n                assert pet.status in status_set, f\"Expected status in {status_set}, got {pet.status}\"\n    \n            for test_pet_status in test_pet_list:\n                actual_pet = next((pet for pet in pets if pet.id == test_pet_status['id']), None)\n>               assert actual_pet is not None, (\n                       ^^^^^^^^^^^^^^^^^^^^^^\n                    f\"Pet with id={test_pet_status['id']} not found in response. \"\n                    \"Note: this is a limitation of the test server; on production this cannot happen.\"\n                )\nE               AssertionError: Pet with id=337473 not found in response. Note: this is a limitation of the test server; on production this cannot happen.\n\nhelpers/assertion_helper.py:96: AssertionError","steps":[{"name":"GET /api/v3/pet/findByStatus","time":{"start":1759063284050,"stop":1759063284056,"duration":6},"status":"passed","steps":[],"attachments":[{"uid":"c964900de40330c6","name":"Request","source":"c964900de40330c6.json","type":"application/json","size":211},{"uid":"7ec8b44ff8cbe7f7","name":"Response","source":"7ec8b44ff8cbe7f7.json","type":"application/json","size":2746}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},{"name":"Verify that pets with status in {'sold'} (200)","time":{"start":1759063284056,"stop":1759063284056,"duration":0},"status":"failed","statusMessage":"AssertionError: Pet with id=337473 not found in response. Note: this is a limitation of the test server; on production this cannot happen.\n","statusTrace":"  File \"/home/runner/work/python-testing-lab/python-testing-lab/helpers/assertion_helper.py\", line 96, in assert_pets_status_success\n    assert actual_pet is not None, (\n           ^^^^^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"pet_with_status::0","time":{"start":1759063284062,"stop":1759063284068,"duration":6},"status":"passed","steps":[{"name":"DELETE /api/v3/pet/337473","time":{"start":1759063284062,"stop":1759063284068,"duration":6},"status":"passed","steps":[],"attachments":[{"uid":"ad58a4e61c0e0c3d","name":"Request","source":"ad58a4e61c0e0c3d.json","type":"application/json","size":211},{"uid":"3e3b0eedca0da950","name":"Response","source":"3e3b0eedca0da950.json","type":"application/json","size":492}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":2,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":2,"hasContent":true,"attachmentStep":false}],"labels":[{"name":"feature","value":"Pet API"},{"name":"story","value":"Get Pet by Status"},{"name":"tag","value":"pet_status"},{"name":"parentSuite","value":"tests.api"},{"name":"suite","value":"test_pet_status"},{"name":"subSuite","value":"TestFindPetByStatus"},{"name":"host","value":"runnervm3ublj"},{"name":"thread","value":"2103-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.api.test_pet_status"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"pet_with_status","value":"'sold'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":["pet_status"]},"source":"73a1561adfbb3ecf.json","parameterValues":["'sold'"]}